
RTOS_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b10  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e2  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 38       	cpi	r26, 0x85	; 133
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED1_TASK>:
	}
}
void LED1_TASK(void){
	//TOG LED
	//LED PA0
	PORTA ^= (1<<0);
  7c:	9b b3       	in	r25, 0x1b	; 27
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 27       	eor	r24, r25
  82:	8b bb       	out	0x1b, r24	; 27
  84:	08 95       	ret

00000086 <LED2_TASK>:
}
void LED2_TASK(void){
	PORTA ^= (1<<1);
  86:	9b b3       	in	r25, 0x1b	; 27
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	89 27       	eor	r24, r25
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret

00000090 <LED3_TASK>:
}
void LED3_TASK(void){
	PORTA ^= (1<<2);
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	89 27       	eor	r24, r25
  96:	8b bb       	out	0x1b, r24	; 27
  98:	08 95       	ret

0000009a <main>:

void LED1_TASK(void);
void LED2_TASK(void);
void LED3_TASK(void);
int main(void)
{	DDRA=0b00000111;
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	8a bb       	out	0x1a, r24	; 26
	RTOS_voidCreateTask(0,1000,LED1_TASK,0);
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	4e e3       	ldi	r20, 0x3E	; 62
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	68 ee       	ldi	r22, 0xE8	; 232
  a8:	73 e0       	ldi	r23, 0x03	; 3
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(1,2000,LED2_TASK,1);
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	43 e4       	ldi	r20, 0x43	; 67
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 ed       	ldi	r22, 0xD0	; 208
  ba:	77 e0       	ldi	r23, 0x07	; 7
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 6b 00 	call	0xd6	; 0xd6 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(2,3000,LED3_TASK,2);
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	48 e4       	ldi	r20, 0x48	; 72
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	68 eb       	ldi	r22, 0xB8	; 184
  cc:	7b e0       	ldi	r23, 0x0B	; 11
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <RTOS_voidCreateTask>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x3a>

000000d6 <RTOS_voidCreateTask>:
static Task_t SystemTasks[TASK_MAX_NUM]={{NULL_PTR}};   //First element of first struct ==>null ,  others ==>
													//{{NULL,0},{0,0},{0,0}}

u8 RTOS_voidCreateTask(u8 Copy_u8Priority,u16 Copy_u16Periodicity, void (*Copy_PTR_TaskFunc)(void),u16 Copy_u16FirstDelay){
	u8 Local_u8ErrorState = OK;
	if(SystemTasks[Copy_u8Priority].TaskFunc == NULL_PTR){
  d6:	a8 2f       	mov	r26, r24
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	89 9f       	mul	r24, r25
  de:	f0 01       	movw	r30, r0
  e0:	11 24       	eor	r1, r1
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	82 81       	ldd	r24, Z+2	; 0x02
  e8:	93 81       	ldd	r25, Z+3	; 0x03
  ea:	89 2b       	or	r24, r25
  ec:	a1 f4       	brne	.+40     	; 0x116 <RTOS_voidCreateTask+0x40>
		//put task according to it's priority
		SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
  ee:	fd 01       	movw	r30, r26
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	ea 1b       	sub	r30, r26
  fe:	fb 0b       	sbc	r31, r27
 100:	e0 5a       	subi	r30, 0xA0	; 160
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	71 83       	std	Z+1, r23	; 0x01
 106:	60 83       	st	Z, r22
		SystemTasks[Copy_u8Priority].TaskFunc = Copy_PTR_TaskFunc;
 108:	53 83       	std	Z+3, r21	; 0x03
 10a:	42 83       	std	Z+2, r20	; 0x02
		SystemTasks[Copy_u8Priority].state = TASK_RESUMED;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	84 83       	std	Z+4, r24	; 0x04
		SystemTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
 110:	36 83       	std	Z+6, r19	; 0x06
 112:	25 83       	std	Z+5, r18	; 0x05
 114:	08 95       	ret
	}
	else{
		Local_u8ErrorState = NOK;
 116:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_u8ErrorState;
}
 118:	08 95       	ret

0000011a <__vector_10>:
}


//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
 13c:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <TIMER0_CTC_ISR_PTR>
 140:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <TIMER0_CTC_ISR_PTR+0x1>
 144:	30 97       	sbiw	r30, 0x00	; 0
 146:	09 f0       	breq	.+2      	; 0x14a <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
 148:	09 95       	icall

}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
